// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  VENDOR
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum NotificationType {
  ORDER_UPDATE
  PROMOTION
  BROADCAST
  PAYMENT_CONFIRMED
}

enum PromotionType {
  PERCENTAGE
  FIXED
  BOGO
}
enum EntityType {
  CUSTOMER
  SHOP
}

enum DeliveryStatusType {
  ASSIGNED  
  IN_TRANSIT  
  DELIVERED  
  FAILED
}
model Vendor {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  password    String
  role        Role      @default(VENDOR)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  shops       Shop[]
  products    Product[]
}

model Shop {
  id             String       @id @default(uuid())
  name           String
  vendorId       String
  description    String?
  imageUrl       String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  averageRating  Float?       @default(0)
  vendor         Vendor       @relation(fields: [vendorId], references: [id])
  products       Product[]
  orders         Order[]
  addresses      Address[]
  reviews        Review[]
  inventories    Inventory[]
  promotions     Promotion[]
  @@index([name])
  Delivery Delivery[]
}

model Product {
  id             String       @id @default(uuid())
  name           String
  description    String?
  price          Float
  vendorId       String
  shopId         String
  categoryId     String?
  thumbnailUrl   String?      // Primary image for product
  imageUrls      Json 
  stockQuantity  Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  averageRating  Float?       @default(0)
  vendor         Vendor       @relation(fields: [vendorId], references: [id])
  shop           Shop         @relation(fields: [shopId], references: [id])
  category       Category?    @relation("ProductCategory", fields: [categoryId], references: [id])
  orderItems     OrderItem[]
  reviews        Review[]
  inventory      Inventory?
  promotions     Promotion[]
  @@index([name])
  @@index([description])
}

model Category {
  id          String      @id @default(uuid())
  name        String      @unique
  description String?
  imageUrl    String?
  parentId    String?
  parent      Category?   @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[]  @relation("CategoryHierarchy")
  products    Product[]   @relation("ProductCategory")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Order {
  id            String        @id @default(uuid())
  customerId    String
  shopId        String
  promotionId   String?
  totalAmount   Float
  status        OrderStatus   @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  customer      Customer      @relation(fields: [customerId], references: [id])
  shop          Shop          @relation(fields: [shopId], references: [id])
  promotion     Promotion?    @relation("PromotionOrder", fields: [promotionId], references: [id])
  orderItems    OrderItem[]
  payment       Payment?
  delivery      Delivery?
  usages        PromotionUsage[]
}

model OrderItem {
  id          String   @id @default(uuid())
  orderId     String
  productId   String
  quantity    Int
  price       Float
  order       Order    @relation(fields: [orderId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
}

model Customer {
  id            String           @id @default(uuid())
  name          String
  email         String           @unique
  password      String
  role          Role             @default(CUSTOMER)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  orders        Order[]
  reviews       Review[]
  addresses     Address[]
  notifications Notification[]
  usages        PromotionUsage[]

  Delivery Delivery[]

  Payment Payment[]
}

model Address {
  id          String   @id @default(uuid())
  entityId    String
  entityType  EntityType
  formattedAddress String
  street      String
  city        String
  state       String
  country     String
  postalCode  String
  latitude    Float
  longitude   Float
  isDefault       Boolean   @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  customer    Customer? @relation(fields: [entityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "customer_address")
  shop        Shop?     @relation(fields: [entityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "shop_address")

  Delivery Delivery[]
}

model Review {
  id          String    @id @default(uuid())
  customerId  String
  productId   String?
  shopId      String?
  rating      Int
  comment     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  customer    Customer  @relation(fields: [customerId], references: [id])
  product     Product?  @relation(fields: [productId], references: [id])
  shop        Shop?     @relation(fields: [shopId], references: [id])
}

model Inventory {
  id          String   @id @default(uuid())
  productId   String   @unique
  shopId      String
  quantity    Int      @default(0)
  lastUpdated DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id])
  shop        Shop     @relation(fields: [shopId], references: [id])
  @@unique([productId, shopId], name: "productId_shopId")
}

model Payment {
  id          String        @id @default(uuid())
  orderId     String        @unique
  customerId     String        @unique
  amount      Float
  status      PaymentStatus @default(PENDING)
  transactionId String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  customer    Customer      @relation(fields: [customerId],references: [id])
  order       Order         @relation(fields: [orderId], references: [id])
}

model Notification {
  id          String          @id @default(uuid())
  userId      String
  userType    Role
  type        NotificationType
  message     String
  isRead      Boolean         @default(false)
  createdAt   DateTime        @default(now())
  customer    Customer?       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "customer_notification")
}

model Delivery {
  id           String    @id @default(uuid())
  orderId      String    @unique
  customerId   String    @unique
  shopId       String    @unique
  addressId    String
  status       DeliveryStatusType
  trackingNumber String?
  estimatedDeliveryDate DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  shop         Shop      @relation(fields: [shopId],references: [id])
  customer     Customer  @relation(fields: [customerId],references: [id])
  order        Order     @relation(fields: [orderId], references: [id])
  address      Address   @relation(fields: [addressId], references: [id])
}

model Promotion {
  id             String            @id @default(uuid())
  code           String            @unique
  type           PromotionType
  value          Float
  description    String
  startDate      DateTime
  endDate        DateTime
  minOrderAmount Float?
  maxUses        Int?
  shopId         String?
  productId      String?
  isActive       Boolean           @default(true)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  shop           Shop?             @relation(fields: [shopId], references: [id])
  product        Product?          @relation(fields: [productId], references: [id])
  usages         PromotionUsage[]
  orders         Order[]           @relation("PromotionOrder")
  @@index([code])
}

model PromotionUsage {
  id          String    @id @default(uuid())
  promotionId String
  customerId  String
  orderId     String
  usedAt      DateTime  @default(now())
  promotion   Promotion @relation(fields: [promotionId], references: [id])
  customer    Customer  @relation(fields: [customerId], references: [id])
  order       Order     @relation(fields: [orderId], references: [id])
}